#\DeclareLyXModule{Lyx Notebook Python}
#DescriptionBegin
#The Python cells for Lyx Notebook.
#DescriptionEnd

# Author : alb
#
# THIS FILE IS AUTOMATICALLY GENERATED BY generateModuleFilesFromTemplate.py
# Modifications can be made, but they will be overwritten if it is run again.

Format 21

Requires "listings,verbatim,ifthen,color,marginnote,needspace,graphicx,setspace,textcomp"

AddToPreamble
   %
   % The preamble inserted by the Lyx Notebook module for Python.
   %
   \usepackage{listings}
   \usepackage{verbatim} % to make comment blocks for non-printing
   \usepackage{ifthen} % etoolbox is apparently more modern, but ifthen works fine
   \usepackage{color}
   \usepackage{marginnote} % for small labels to right of cells
   \usepackage{needspace} % prevent bad line breaks hopefully
   \usepackage{graphicx} % to rotate the small labels to the right of cells
   \usepackage{setspace} % needed for \setstretch, which may not be needed
   % \usepackage[T1]{fontenc} % needed for some fonts if not already loaded
   \usepackage{textcomp} % needed for upquote=true option and fonts like beramono
   % \usepackage{courier} % for lack of bold in Computer Modern typewriter font
   % \usepackage{palatino}
   %
   % Just tell users in docs to select luximono or beramono for tt font, from
   % lyx document menu, if they have it installed.
   %\IfFileExists{luximono.sty}{
   %   \usepackage[scaled]{luximono} % recommended by some, not preloaded
   %}
   %{}
   % \usepackage[scaled]{beramono} % bitstream vera mono
   % \usepackage[scaled]{inconsolata}

   % set some global formatting options to their default values
   \def\lyxNotebookNoColor{false} % use color unless this def is overridden
   \def\lyxNotebookNoCellLabels{false} % put small label on cells unless set true
   \def\lyxNotebookNeedspaceLabelValue{4\baselineskip}


   %
   % Header stuff for the Python Init cells.
   %
   % Define the function to turn off printing (just make same as verbatim comment)
   % for the inset specifier Python and basic cell type Init
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintingIsOffInitPython{false}
   \def\lyxNotebookPrintOffInitPython{%
      \def\lyxNotebookPrintingIsOffInitPython{true}%
      \let\oldLyxNotebookCellInitPython\lyxNotebookCellInitPython%
      \let\lyxNotebookCellInitPython=\comment%
      \let\oldEndlyxNotebookCellInitPython\endlyxNotebookCellInitPython%
      \let\endlyxNotebookCellInitPython=\endcomment%
   }%

   % Define the function to turn printing back on if it has been turned off
   % for the inset specifier Python and basic cell type Init
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintOnInitPython{%
      \ifthenelse{\equal{\lyxNotebookPrintingIsOffInitPython}{true}}{%
         \let\lyxNotebookCellInitPython=\oldLyxNotebookCellInitPython%
         \let\endlyxNotebookCellInitPython=\oldEndlyxNotebookCellInitPython%
         \def\lyxNotebookPrintingIsOffInitPython{false}%
      }%
      {}%
   }%

   % Build up the general printing off/on commands by adding commands for the
   % inset specifier Python and basic cell type Init
   % (Note expandafter is used to avoid recursion problems; using e.g.
   % \let\oldegg\egg and then using oldegg on the r.h.s. should also work.)
   \ifthenelse{\isundefined{\lyxNotebookPrintOff}}{\def\lyxNotebookPrintOff{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOff\expandafter{\lyxNotebookPrintOff\lyxNotebookPrintOffInitPython}
   \ifthenelse{\isundefined{\lyxNotebookPrintOn}}{\def\lyxNotebookPrintOn{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOn\expandafter{\lyxNotebookPrintOn\lyxNotebookPrintOnInitPython}

   %
   % Header stuff for the Python Standard cells.
   %
   % Define the function to turn off printing (just make same as verbatim comment)
   % for the inset specifier Python and basic cell type Standard
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintingIsOffStandardPython{false}
   \def\lyxNotebookPrintOffStandardPython{%
      \def\lyxNotebookPrintingIsOffStandardPython{true}%
      \let\oldLyxNotebookCellStandardPython\lyxNotebookCellStandardPython%
      \let\lyxNotebookCellStandardPython=\comment%
      \let\oldEndlyxNotebookCellStandardPython\endlyxNotebookCellStandardPython%
      \let\endlyxNotebookCellStandardPython=\endcomment%
   }%

   % Define the function to turn printing back on if it has been turned off
   % for the inset specifier Python and basic cell type Standard
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintOnStandardPython{%
      \ifthenelse{\equal{\lyxNotebookPrintingIsOffStandardPython}{true}}{%
         \let\lyxNotebookCellStandardPython=\oldLyxNotebookCellStandardPython%
         \let\endlyxNotebookCellStandardPython=\oldEndlyxNotebookCellStandardPython%
         \def\lyxNotebookPrintingIsOffStandardPython{false}%
      }%
      {}%
   }%

   % Build up the general printing off/on commands by adding commands for the
   % inset specifier Python and basic cell type Standard
   % (Note expandafter is used to avoid recursion problems; using e.g.
   % \let\oldegg\egg and then using oldegg on the r.h.s. should also work.)
   \ifthenelse{\isundefined{\lyxNotebookPrintOff}}{\def\lyxNotebookPrintOff{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOff\expandafter{\lyxNotebookPrintOff\lyxNotebookPrintOffStandardPython}
   \ifthenelse{\isundefined{\lyxNotebookPrintOn}}{\def\lyxNotebookPrintOn{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOn\expandafter{\lyxNotebookPrintOn\lyxNotebookPrintOnStandardPython}

   %
   % Header stuff for the Python Output cells.
   %
   % Define the function to turn off printing (just make same as verbatim comment)
   % for the inset specifier Python and basic cell type Output
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintingIsOffOutputPython{false}
   \def\lyxNotebookPrintOffOutputPython{%
      \def\lyxNotebookPrintingIsOffOutputPython{true}%
      \let\oldLyxNotebookCellOutputPython\lyxNotebookCellOutputPython%
      \let\lyxNotebookCellOutputPython=\comment%
      \let\oldEndlyxNotebookCellOutputPython\endlyxNotebookCellOutputPython%
      \let\endlyxNotebookCellOutputPython=\endcomment%
   }%

   % Define the function to turn printing back on if it has been turned off
   % for the inset specifier Python and basic cell type Output
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintOnOutputPython{%
      \ifthenelse{\equal{\lyxNotebookPrintingIsOffOutputPython}{true}}{%
         \let\lyxNotebookCellOutputPython=\oldLyxNotebookCellOutputPython%
         \let\endlyxNotebookCellOutputPython=\oldEndlyxNotebookCellOutputPython%
         \def\lyxNotebookPrintingIsOffOutputPython{false}%
      }%
      {}%
   }%

   % Build up the general printing off/on commands by adding commands for the
   % inset specifier Python and basic cell type Output
   % (Note expandafter is used to avoid recursion problems; using e.g.
   % \let\oldegg\egg and then using oldegg on the r.h.s. should also work.)
   \ifthenelse{\isundefined{\lyxNotebookPrintOff}}{\def\lyxNotebookPrintOff{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOff\expandafter{\lyxNotebookPrintOff\lyxNotebookPrintOffOutputPython}
   \ifthenelse{\isundefined{\lyxNotebookPrintOn}}{\def\lyxNotebookPrintOn{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOn\expandafter{\lyxNotebookPrintOn\lyxNotebookPrintOnOutputPython}

   % Latex code for Python cells from interpreterSpec.py
   %
   % Define some of the variables described in the documentation to set the font
   % size and family.  These definitions should preferably be used below instead of
   % the values themselves (so users can easily redefine these default values
   % from their preamble).
   \def\lyxNotebookFontSize{\footnotesize}
   \def\lyxNotebookColorCodeFontFamily{\ttfamily}
   \def\lyxNotebookColorOutputFontFamily{\ttfamily}
   \def\lyxNotebookNoColorCodeFontFamily{\sffamily}
   \def\lyxNotebookNoColorOutputFontFamily{\sffamily}
   \def\lyxNotebookLabelFormat{\ttfamily\tiny\bfseries}

   % define some colors to use
   \definecolor{gray9}{gray}{0.5}
   \definecolor{darkGray9}{gray}{0.05} % almost black, for normal text with colors
   \definecolor{green9}{rgb}{0,0.6,0}
   \definecolor{darkerGreen9}{rgb}{0,0.3,0}
   \definecolor{darkerRed9}{rgb}{0.6,0.0,0.0}
   \definecolor{brightRed9}{rgb}{1.0,0.0,0.0}
   \definecolor{yellowGold9}{rgb}{0.7,0.5,0.0}
   \definecolor{blue9}{rgb}{0.20,0.20,1.0}
   \definecolor{darkerBlue9}{rgb}{0.20,0.20,0.60}
   \definecolor{pinkRed9}{rgb}{0.9,0.2,0.4}
   \definecolor{turquoise9}{rgb}{0.0,0.6,1.0}
   \definecolor{bluishPurple9}{rgb}{0.2,0.0,1.0}
   \definecolor{purple9}{rgb}{0.4,0.0,1.0}

   %
   % Now define the Listings styles for Lyx Notebook Python,
   % setting the language to python (which will be replaced by the
   % listingsLanguage field of the general spec.  Note the default frame
   % conventions are defined here (since the general code format for Init
   % and Standard cells doesn't differ).
   %

   % define style lyxNotebookNoColorInitPython
   \lstdefinestyle{lyxNotebookNoColorInitPython}{
      language=python,
      % generalListingsCodeFormat
      showlines=true, % keep blank lines at end of listing blocks
      sensitive=true,
      morecomment=[s]{"""}{"""},
      %alsoletter={1234567890}, % numbers like letters
      % but in otherkeywords causes it to highlight in strings and comments
      %otherkeywords={(,),[,],\{,\},@,\,,:,.,`,=,;,+=,-=,*=,/=,//=,%=,&=,|=,^=,>>=,<<=,**=} % delimiters in Python
      %otherkeywords={1,2,3,4,5,6,7,8,9,0,-,=,+,[,],(,),\{,\},:,*,!},
      %
      % The keywords need to be redefined to reset the "import" color.
      % See http://docs.python.org/reference/lexical_analysis.html
      keywords=[1]{and,as,assert,break,class,continue,def,del,elif,else,%
                   except,exec,finally,for,global,if,in,is,lambda,not,or,%
                   pass,print,raise,return,try,while,with,yield},
      morekeywords=[2]{True, False, None, self, NotImplemented, Ellipsis,%
                       __debug__, quit, exit, copyright, license, credits},
      morekeywords=[3]{from,import}, % note "as" is also in "with" and "except"
      %mathescape=true,
      % Linebreak symbols: arrows look nice but mess up the frame
      % prebreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
      % postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\diagdown}},
      % Use backslash instead:
      prebreak=\bf\textbackslash,
      showstringspaces=false,
      breaklines=true,
      breakatwhitespace=true,
      breakindent=1.5em,
      breakautoindent=true,
      % fancyvrb=true, % causes problems, even with all but lang commented out
      % numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=6pt,
      % columns=flexible,
      % columns=fullflexible, % good with monospace font, & more chars per line
      columns=fixed, % fewer chars per line, but keeps extra spaces inserted
      % linewidth=\linewidth, % default seems to work better
      upquote=true, 
      % nonColorListingsCodeFormat
      basicstyle=\lyxNotebookFontSize%
                 \setstretch{1}%
                 \lyxNotebookNoColorCodeFontFamily%
                 \color{darkGray9},
      stringstyle=\ttfamily, % use ttfamily for strings at least
      %commentstyle=\upshape, % don't use the default italic comments
      commentstyle=\slshape\color[rgb]{0.3,0.3,0.3}, % slanted gray
      %commentstyle=\itshape,
      keywordstyle=[1]\bfseries,
      keywordstyle=[2]\bfseries,
      keywordstyle=[3]\bfseries, 
      frame=TbLR
   }

   % define style lyxNotebookNoColorStandardPython
   \lstdefinestyle{lyxNotebookNoColorStandardPython}{
      style=lyxNotebookNoColorInitPython,
      frame=tblr
   }

   % define style lyxNotebookColorInitPython
   \lstdefinestyle{lyxNotebookColorInitPython}{
      language=python,
      % generalListingsCodeFormat
      showlines=true, % keep blank lines at end of listing blocks
      sensitive=true,
      morecomment=[s]{"""}{"""},
      %alsoletter={1234567890}, % numbers like letters
      % but in otherkeywords causes it to highlight in strings and comments
      %otherkeywords={(,),[,],\{,\},@,\,,:,.,`,=,;,+=,-=,*=,/=,//=,%=,&=,|=,^=,>>=,<<=,**=} % delimiters in Python
      %otherkeywords={1,2,3,4,5,6,7,8,9,0,-,=,+,[,],(,),\{,\},:,*,!},
      %
      % The keywords need to be redefined to reset the "import" color.
      % See http://docs.python.org/reference/lexical_analysis.html
      keywords=[1]{and,as,assert,break,class,continue,def,del,elif,else,%
                   except,exec,finally,for,global,if,in,is,lambda,not,or,%
                   pass,print,raise,return,try,while,with,yield},
      morekeywords=[2]{True, False, None, self, NotImplemented, Ellipsis,%
                       __debug__, quit, exit, copyright, license, credits},
      morekeywords=[3]{from,import}, % note "as" is also in "with" and "except"
      %mathescape=true,
      % Linebreak symbols: arrows look nice but mess up the frame
      % prebreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
      % postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\diagdown}},
      % Use backslash instead:
      prebreak=\bf\textbackslash,
      showstringspaces=false,
      breaklines=true,
      breakatwhitespace=true,
      breakindent=1.5em,
      breakautoindent=true,
      % fancyvrb=true, % causes problems, even with all but lang commented out
      % numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=6pt,
      % columns=flexible,
      % columns=fullflexible, % good with monospace font, & more chars per line
      columns=fixed, % fewer chars per line, but keeps extra spaces inserted
      % linewidth=\linewidth, % default seems to work better
      upquote=true, 
      % colorListingsCodeFormat
      basicstyle=\lyxNotebookFontSize%
                 \setstretch{1}%
                 \lyxNotebookColorCodeFontFamily%
                 \color{darkGray9},
      rulecolor=\color{black}, % may be needed for line-broken color lines
      %identifierstyle=\color{darkGray9},
      stringstyle=\ttfamily\color{blue9},
      %stringstyle=\ttfamily\color{darkerBlue9},
      %stringstyle=\ttfamily\color{green9},
      %commentstyle=\upshape\color{green9},
      %commentstyle=\slshape\color{darkerGreen9},
      commentstyle=\slshape\color[rgb]{0.0,0.4,0.0},
      keywordstyle=[1]\bfseries\color{darkerRed9},
      keywordstyle=[2]\bfseries\color{pinkRed9},
      keywordstyle=[3]\bfseries\color{yellowGold9}, 
      frame=TbLR
   }

   % define style lyxNotebookColorStandardPython
   \lstdefinestyle{lyxNotebookColorStandardPython}{
      style=lyxNotebookColorInitPython,
      frame=tblr
   }

   % define style lyxNotebookColorNonEvalPython
   \lstdefinestyle{lyxNotebookColorNonEvalPython}{
      style=lyxNotebookColorInitPython,
      frame=TBLR
   }

   % define style lyxNotebookNoColorNonEvalPython
   \lstdefinestyle{lyxNotebookNoColorNonEvalPython}{
      style=lyxNotebookNoColorInitPython,
      frame=TBLR
   }

   % define style lyxNotebookNoColorOutputPython
   \lstdefinestyle{lyxNotebookNoColorOutputPython}{
      language=,
      % generalListingsOutputFormat
      showlines=true, % keep blank lines at end
      %mathescape=true,
      showstringspaces=false,
      breaklines=true,
      breakatwhitespace=true,
      breakindent=1.5em, breakautoindent=true,
      % Linebreaks: see comments earlier for code cells; arrows mess up frames.
      % prebreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
      % postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\diagdown}},
      % Use backslash instead.
      prebreak=\bf\textbackslash,
      % linewidth=\linewidth, % default seems to work better
      % numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=6pt,
      % columns=flexible, %
      % columns=fullflexible, % good with monospace font, & more chars per line
      columns=fixed, % fewer chars per line, but keeps extra spaces inserted
      aboveskip=\doubleskipamount, % make abut the cell above, a calulated value
      upquote=true, 
      % nonColorListingsOutputFormat
      % set the font to a gray color
      basicstyle=\lyxNotebookFontSize%
                 \setstretch{1}%
                 \lyxNotebookNoColorOutputFontFamily%
                 \color[rgb]{0.2,0.2,0.2}, 
      frame=tblr
   }

   % define lyxNotebookColorOutputPython
   \lstdefinestyle{lyxNotebookColorOutputPython}{
      language=,
      % generalListingsOutputFormat
      showlines=true, % keep blank lines at end
      %mathescape=true,
      showstringspaces=false,
      breaklines=true,
      breakatwhitespace=true,
      breakindent=1.5em, breakautoindent=true,
      % Linebreaks: see comments earlier for code cells; arrows mess up frames.
      % prebreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
      % postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\diagdown}},
      % Use backslash instead.
      prebreak=\bf\textbackslash,
      % linewidth=\linewidth, % default seems to work better
      % numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=6pt,
      % columns=flexible, %
      % columns=fullflexible, % good with monospace font, & more chars per line
      columns=fixed, % fewer chars per line, but keeps extra spaces inserted
      aboveskip=\doubleskipamount, % make abut the cell above, a calulated value
      upquote=true, 
      % colorListingsOutputFormat
      % set the font to a gray color
      basicstyle=\lyxNotebookFontSize%
                 \setstretch{1}
                 \lyxNotebookColorOutputFontFamily
                 \color[rgb]{0.2,0.2,0.2}, 
      frame=tblr
   }



EndPreamble


InsetLayout Flex:LyxNotebookCell:Init:Python
        # Flex custom layouts work with flex-insert, but exact case matters, e.g.,
        #    flex-insert Flex:WrapListings
        # Also works with inset-forall:
        #    inset-forall Flex:WrapListings self-insert egg
        # but puts "egg" before the inset, not inside it.  The operations can also
        # be applied to any prefix, split at a colon, to apply to larger groups.
   LyXType              custom
   #
   # Spacing and newlines.
   #
   FreeSpacing          true
   PassThru             true # true for raw, false to do Latex processing on text
   SpellCheck           false
   # NewLine              false # whether newlines are translated into Latex \\
   ParbreakIsNewline    true
   KeepEmpty            true # keep empty lines
   ForceLTR             true # not sure why, but similar modules set it
   MultiPar             true
   ForcePlain           true # force Plain Layout, so user cannot change
   # custompars false stops blue highlighting on update, inset-select-all still works
   # CustomPars           false # cannot use "paragraph settings" dialog inside inset
   #
   # Labels, fonts, and colors.
   #
   LabelString          "Python Init Code"
   Decoration           classic
   BgColor              white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      # Family              Roman
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
   LabelFont # the font of the inset label in LyX, must be after Font
      # Color          collapsable
      Color          green
      Size           Small
   EndFont
   #
   # Latex-related settings.
   #
   LatexName            lyxNotebookCellInitPython
   # LatexType            command
   LatexType            Environment
   # RequiredArgs         0    # not used
   # LatexParam         "[fragile,allowframebreaks]" # example, not real params
   Requires             "listings,verbatim,ifthen,color,marginnote,needspace,graphicx,setspace,textcomp"
   # NeedProtect        true
   RefPrefix            "lyxCell"
   Preamble
      %
      % The preamble inserted by Python Init InsetLayout.
      %
      \lstnewenvironment{lyxNotebookCellInitPython}{%
         \mbox{}% try to keep all on one line so margin notes stay with listings
         % -----------------------------------------------------------------------
         % Do color-related lstsets, according to user choice of color or not.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoColor}{true}}{%
            % --------------------------------------------------------------------
            % Begin then section of ifthenelse, formatting without color.
            % --------------------------------------------------------------------
            \lstset{style=lyxNotebookNoColorInitPython}%
         } % end then section of ifthenelse
         {  % -----------------------------------------------------------------------
            % Begin else section of ifthenelse, color formatting.
            % -----------------------------------------------------------------------
            \lstset{style=lyxNotebookColorInitPython}%
         } % end else section of ifthenelse
         % -----------------------------------------------------------------------
         % Now execute the any relevant user-defined lstset commands.
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllAll}}%
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllAll%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetInitAll}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetInitAll%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllPython%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetInitPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetInitPython%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         % Put a rotated, bold, ttfamily "Python"
         % always in the right margin.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoCellLabels}{false}}{%
            %
            % The \needspace command keeps the marginnote together with the listing
            % even on pagebreaks.
            %
            % The \leavevmode (or an empty \mbox{}) keeps the marginnote aligned
            % with the top of the listing even when \flushbottom adds vertical
            % space.  It does so by keeping everything on same line.  Not all are
            % probably needed, but it seems to work somewhat.  As a last
            % resort one could temporarily set \raggedbottom.
            %
            % The use of two \marginnote commands (each with an empty slot) is to
            % keep the margin note to the right, even when twosided styles are used.
            %
            \mbox{}%
            %\Needspace*{\lyxNotebookNeedspaceLabelValue}% exact, flushbottom
            %\Needspace{\lyxNotebookNeedspaceLabelValue}% exact but not flushbottom
            \needspace{\lyxNotebookNeedspaceLabelValue}% not flushbottom, approx
            {\reversemarginpar\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat Python}}[0.8em]}\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat Python}}[0.8em]%
            %{\reversemarginpar % this gets the "always to right" for even & odd pages
            %\marginpar[\rotatebox{-90}{\bfseries\ttfamily\tiny Python}]{rrev}}
            %\marginpar[lplain]{\rotatebox{-90}{\bfseries\ttfamily\tiny Python}}
            \nopagebreak%
         } % end of do label-printing
         {} % do nothing when lyxNotebookNoCellLabels is true
         % -----------------------------------------------------------------------
      }% end of lstnewenvironment starting code block
      { % begin of lstnewenvironment ending code block
         % try to avoid breaks between code cells and output cells (if output printed)
         \ifthenelse{\equal{\lyxNotebookPrintingIsOffOutputPython}{false}}{%
         \nopagebreak
         }{}%
      }% end of lstnewenvironment ending code block
   EndPreamble
End


InsetLayout Flex:LyxNotebookCell:Standard:Python
        # Flex custom layouts work with flex-insert, but exact case matters, e.g.,
        #    flex-insert Flex:WrapListings
        # Also works with inset-forall:
        #    inset-forall Flex:WrapListings self-insert egg
        # but puts "egg" before the inset, not inside it.  The operations can also
        # be applied to any prefix, split at a colon, to apply to larger groups.
   LyXType              custom
   #
   # Spacing and newlines.
   #
   FreeSpacing          true
   PassThru             true # true for raw, false to do Latex processing on text
   SpellCheck           false
   # NewLine              false # whether newlines are translated into Latex \\
   ParbreakIsNewline    true
   KeepEmpty            true # keep empty lines
   ForceLTR             true # not sure why, but similar modules set it
   MultiPar             true
   ForcePlain           true # force Plain Layout, so user cannot change
   # custompars false stops blue highlighting on update, inset-select-all still works
   # CustomPars           false # cannot use "paragraph settings" dialog inside inset
   #
   # Labels, fonts, and colors.
   #
   LabelString          "Python  Code"
   Decoration           classic
   BgColor              white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      # Family              Roman
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
   LabelFont # the font of the inset label in LyX, must be after Font
      # Color          collapsable
      Color          green
      Size           Small
   EndFont
   #
   # Latex-related settings.
   #
   LatexName            lyxNotebookCellStandardPython
   # LatexType            command
   LatexType            Environment
   # RequiredArgs         0    # not used
   # LatexParam         "[fragile,allowframebreaks]" # example, not real params
   Requires             "listings,verbatim,ifthen,color,marginnote,needspace,graphicx,setspace,textcomp"
   # NeedProtect        true
   RefPrefix            "lyxCell"
   Preamble
      %
      % The preamble inserted by Python Standard InsetLayout.
      %
      \lstnewenvironment{lyxNotebookCellStandardPython}{%
         \mbox{}% try to keep all on one line so margin notes stay with listings
         % -----------------------------------------------------------------------
         % Do color-related lstsets, according to user choice of color or not.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoColor}{true}}{%
            % --------------------------------------------------------------------
            % Begin then section of ifthenelse, formatting without color.
            % --------------------------------------------------------------------
            \lstset{style=lyxNotebookNoColorStandardPython}%
         } % end then section of ifthenelse
         {  % -----------------------------------------------------------------------
            % Begin else section of ifthenelse, color formatting.
            % -----------------------------------------------------------------------
            \lstset{style=lyxNotebookColorStandardPython}%
         } % end else section of ifthenelse
         % -----------------------------------------------------------------------
         % Now execute the any relevant user-defined lstset commands.
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllAll}}%
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllAll%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetStandardAll}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetStandardAll%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllPython%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetStandardPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetStandardPython%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         % Put a rotated, bold, ttfamily "Python"
         % always in the right margin.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoCellLabels}{false}}{%
            %
            % The \needspace command keeps the marginnote together with the listing
            % even on pagebreaks.
            %
            % The \leavevmode (or an empty \mbox{}) keeps the marginnote aligned
            % with the top of the listing even when \flushbottom adds vertical
            % space.  It does so by keeping everything on same line.  Not all are
            % probably needed, but it seems to work somewhat.  As a last
            % resort one could temporarily set \raggedbottom.
            %
            % The use of two \marginnote commands (each with an empty slot) is to
            % keep the margin note to the right, even when twosided styles are used.
            %
            \mbox{}%
            %\Needspace*{\lyxNotebookNeedspaceLabelValue}% exact, flushbottom
            %\Needspace{\lyxNotebookNeedspaceLabelValue}% exact but not flushbottom
            \needspace{\lyxNotebookNeedspaceLabelValue}% not flushbottom, approx
            {\reversemarginpar\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat Python}}[0.8em]}\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat Python}}[0.8em]%
            %{\reversemarginpar % this gets the "always to right" for even & odd pages
            %\marginpar[\rotatebox{-90}{\bfseries\ttfamily\tiny Python}]{rrev}}
            %\marginpar[lplain]{\rotatebox{-90}{\bfseries\ttfamily\tiny Python}}
            \nopagebreak%
         } % end of do label-printing
         {} % do nothing when lyxNotebookNoCellLabels is true
         % -----------------------------------------------------------------------
      }% end of lstnewenvironment starting code block
      { % begin of lstnewenvironment ending code block
         % try to avoid breaks between code cells and output cells (if output printed)
         \ifthenelse{\equal{\lyxNotebookPrintingIsOffOutputPython}{false}}{%
         \nopagebreak
         }{}%
      }% end of lstnewenvironment ending code block
   EndPreamble
End


InsetLayout Flex:LyxNotebookCell:Output:Python
        # Flex custom layouts work with flex-insert, but exact case matters, e.g.,
        #    flex-insert Flex:WrapListings
        # Also works with inset-forall:
        #    inset-forall Flex:WrapListings self-insert egg
        # but puts "egg" before the inset, not inside it.  The operations can also
        # be applied to any prefix, split at a colon, to apply to larger groups.
   LyXType              custom
   #
   # Spacing and newlines.
   #
   FreeSpacing          true
   PassThru             true # true for raw, false to do Latex processing on text
   SpellCheck           false
   # NewLine              false # whether newlines are translated into Latex \\
   ParbreakIsNewline    true
   KeepEmpty            true # keep empty lines
   ForceLTR             true # not sure why, but similar modules set it
   MultiPar             true
   ForcePlain           true # force Plain Layout, so user cannot change
   # custompars false stops blue highlighting on update, inset-select-all still works
   # CustomPars           false # cannot use "paragraph settings" dialog inside inset
   #
   # Labels, fonts, and colors.
   #
   LabelString          "Python Output"
   # Decoration           minimalistic
   Decoration           classic
   BgColor              white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      # Family              Roman
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
   LabelFont # the font of the inset label in LyX, must be after Font
      # Color          collapsable
      Color          green
      Size           Small
   EndFont
   #
   # Latex-related settings.
   #
   LatexName            lyxNotebookCellOutputPython
   # LatexType            command
   LatexType            Environment
   # RequiredArgs         0    # not used
   # LatexParam         "[fragile,allowframebreaks]" # example, not real params
   Requires             "listings,verbatim,ifthen,textcomp"
   # NeedProtect        true
   RefPrefix            "lyxCell"
   Preamble
      %
      % The preamble inserted by Python Output InsetLayout.
      %

      % calculate the length of spacing between two listings, to remove it
      \ifthenelse{\isundefined{\doubleskipamount}}{\newlength{\doubleskipamount}}{}
      \setlength{\doubleskipamount}{-\medskipamount}
      \addtolength{\doubleskipamount}{2pt}

      \lstnewenvironment{lyxNotebookCellOutputPython}{
         \nopagebreak % try to keep on the same page as standard cell above it
         % -----------------------------------------------------------------------
         % Do color-related lstsets, according to user choice of color or not.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoColor}{true}}{
            % --------------------------------------------------------------------
            % Begin then section of ifthenelse, formatting without color.
            % --------------------------------------------------------------------
            \lstset{style=lyxNotebookNoColorOutputPython}
         } % end then section of ifthenelse
         {
            % -----------------------------------------------------------------------
            % Begin else section of ifthenelse, color formatting.
            % -----------------------------------------------------------------------
            \lstset{style=lyxNotebookColorOutputPython}
         } % end else section of ifthenelse
         % -----------------------------------------------------------------------
         % Now execute the any relevant user-defined lstset commands.
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllAll}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllAll
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetOutputAll}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetOutputAll
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllPython
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetOutputPython}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetOutputPython
         } % end of else section of ifthenelse for whether user lstset is defined
      }% end of lstnewenvironment starting code block
      {}% all of lstnewenvironment ending code (empty)
   EndPreamble
End
