"""

=========================================================================
This file is part of LyX Notebook, which works with LyX but is an
independent project.  License details (MIT) can be found in the file
COPYING.

Copyright (c) 2012 Allen Barker
=========================================================================

Generate all the `.module` files from templates.

This module is only used by `install.py` to generate `.module` files.  It only
imports from `interpreter_specs`.

All file reads and writes are from the Python current working directory.  This
module expects that the CWD when it is run will be the
`filesForDotLyxLayoutsDir` directory!

"""

from __future__ import print_function, division
import sys

# The interpreterSpecs module is loaded because it contains the string defining
# the Listings formatting language for each type of interpreter it defines.
sys.path.append("..")
from interpreter_specs import allSpecs


# =============================================================
# Define the basic template for the header of the .module file.
# There is 1) a common beginning part in each module, 2) a part
# which is looped over <<basicCellType>>, 3) and a closing section.
# =============================================================

module_header_template_common = \
    r"""#\DeclareLyXModule{Lyx Notebook <<insetSpecifier>>}
#DescriptionBegin
#The <<insetSpecifier>> cells for Lyx Notebook.
#DescriptionEnd

# Author : alb
#
# THIS FILE IS AUTOMATICALLY GENERATED BY generateModuleFilesFromTemplate.py
# Modifications can be made, but they will be overwritten if it is run again.

Format 21

Requires "listings,verbatim,ifthen,color,marginnote,needspace,graphicx,setspace,textcomp"

AddToPreamble
   %
   % The preamble inserted by the Lyx Notebook module for <<insetSpecifier>>.
   %
   \usepackage{listings}
   \usepackage{verbatim} % to make comment blocks for non-printing
   \usepackage{ifthen} % etoolbox is apparently more modern, but ifthen works fine
   \usepackage{color}
   \usepackage{marginnote} % for small labels to right of cells
   \usepackage{needspace} % prevent bad line breaks hopefully
   \usepackage{graphicx} % to rotate the small labels to the right of cells
   \usepackage{setspace} % needed for \setstretch, which may not be needed
   % \usepackage[T1]{fontenc} % needed for some fonts if not already loaded
   \usepackage{textcomp} % needed for upquote=true option and fonts like beramono
   % \usepackage{courier} % for lack of bold in Computer Modern typewriter font
   % \usepackage{palatino}
   %
   % Just tell users in docs to select luximono or beramono for tt font, from
   % lyx document menu, if they have it installed.
   %\IfFileExists{luximono.sty}{
   %   \usepackage[scaled]{luximono} % recommended by some, not preloaded
   %}
   %{}
   % \usepackage[scaled]{beramono} % bitstream vera mono
   % \usepackage[scaled]{inconsolata}

   % set some global formatting options to their default values
   \def\lyxNotebookNoColor{false} % use color unless this def is overridden
   \def\lyxNotebookNoCellLabels{false} % put small label on cells unless set true
   \def\lyxNotebookNeedspaceLabelValue{4\baselineskip}

"""

module_header_template_basic_cell_type_dependent = \
    r"""
   %
   % Header stuff for the <<insetSpecifier>> <<basicCellType>> cells.
   %
   % Define the function to turn off printing (just make same as verbatim comment)
   % for the inset specifier <<insetSpecifier>> and basic cell type <<basicCellType>>
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintingIsOff<<basicCellType>><<insetSpecifier>>{false}
   \def\lyxNotebookPrintOff<<basicCellType>><<insetSpecifier>>{%
      \def\lyxNotebookPrintingIsOff<<basicCellType>><<insetSpecifier>>{true}%
      \let\oldLyxNotebookCell<<basicCellType>><<insetSpecifier>>\lyxNotebookCell<<basicCellType>><<insetSpecifier>>%
      \let\lyxNotebookCell<<basicCellType>><<insetSpecifier>>=\comment%
      \let\oldEndlyxNotebookCell<<basicCellType>><<insetSpecifier>>\endlyxNotebookCell<<basicCellType>><<insetSpecifier>>%
      \let\endlyxNotebookCell<<basicCellType>><<insetSpecifier>>=\endcomment%
   }%

   % Define the function to turn printing back on if it has been turned off
   % for the inset specifier <<insetSpecifier>> and basic cell type <<basicCellType>>
   % Note at least some EOL comments required below or extra space inserted in text.
   \def\lyxNotebookPrintOn<<basicCellType>><<insetSpecifier>>{%
      \ifthenelse{\equal{\lyxNotebookPrintingIsOff<<basicCellType>><<insetSpecifier>>}{true}}{%
         \let\lyxNotebookCell<<basicCellType>><<insetSpecifier>>=\oldLyxNotebookCell<<basicCellType>><<insetSpecifier>>%
         \let\endlyxNotebookCell<<basicCellType>><<insetSpecifier>>=\oldEndlyxNotebookCell<<basicCellType>><<insetSpecifier>>%
         \def\lyxNotebookPrintingIsOff<<basicCellType>><<insetSpecifier>>{false}%
      }%
      {}%
   }%

   % Build up the general printing off/on commands by adding commands for the
   % inset specifier <<insetSpecifier>> and basic cell type <<basicCellType>>
   % (Note expandafter is used to avoid recursion problems; using e.g.
   % \let\oldegg\egg and then using oldegg on the r.h.s. should also work.)
   \ifthenelse{\isundefined{\lyxNotebookPrintOff}}{\def\lyxNotebookPrintOff{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOff\expandafter{\lyxNotebookPrintOff\lyxNotebookPrintOff<<basicCellType>><<insetSpecifier>>}
   \ifthenelse{\isundefined{\lyxNotebookPrintOn}}{\def\lyxNotebookPrintOn{}}{}
   \expandafter\def\expandafter\lyxNotebookPrintOn\expandafter{\lyxNotebookPrintOn\lyxNotebookPrintOn<<basicCellType>><<insetSpecifier>>}
"""

module_header_template_end = \
    r"""

EndPreamble
"""

# ======================================================
# Define the basic template for Standard and Init cells.
# ======================================================

standard_template = \
    r"""

InsetLayout Flex:LyxNotebookCell:<<basicCellType>>:<<insetSpecifier>>
        # Flex custom layouts work with flex-insert, but exact case matters, e.g.,
        #    flex-insert Flex:WrapListings
        # Also works with inset-forall:
        #    inset-forall Flex:WrapListings self-insert egg
        # but puts "egg" before the inset, not inside it.  The operations can also
        # be applied to any prefix, split at a colon, to apply to larger groups.
   LyXType              custom
   #
   # Spacing and newlines.
   #
   FreeSpacing          true
   PassThru             true # true for raw, false to do Latex processing on text
   SpellCheck           false
   # NewLine              false # whether newlines are translated into Latex \\
   ParbreakIsNewline    true
   KeepEmpty            true # keep empty lines
   ForceLTR             true # not sure why, but similar modules set it
   MultiPar             true
   ForcePlain           true # force Plain Layout, so user cannot change
   # custompars false stops blue highlighting on update, inset-select-all still works
   # CustomPars           false # cannot use "paragraph settings" dialog inside inset
   #
   # Labels, fonts, and colors.
   #
   LabelString          "<<insetSpecifier>> <<labelModifier>> Code"
   Decoration           classic
   BgColor              white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      # Family              Roman
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
   LabelFont # the font of the inset label in LyX, must be after Font
      # Color          collapsable
      Color          green
      Size           Small
   EndFont
   #
   # Latex-related settings.
   #
   LatexName            lyxNotebookCell<<basicCellType>><<insetSpecifier>>
   # LatexType            command
   LatexType            Environment
   # RequiredArgs         0    # not used
   # LatexParam         "[fragile,allowframebreaks]" # example, not real params
   Requires             "listings,verbatim,ifthen,color,marginnote,needspace,graphicx,setspace,textcomp"
   # NeedProtect        true
   RefPrefix            "lyxCell"
   Preamble
      %
      % The preamble inserted by <<insetSpecifier>> <<basicCellType>> InsetLayout.
      %
      \lstnewenvironment{lyxNotebookCell<<basicCellType>><<insetSpecifier>>}{%
         \mbox{}% try to keep all on one line so margin notes stay with listings
         % -----------------------------------------------------------------------
         % Do color-related lstsets, according to user choice of color or not.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoColor}{true}}{%
            % --------------------------------------------------------------------
            % Begin then section of ifthenelse, formatting without color.
            % --------------------------------------------------------------------
            \lstset{style=lyxNotebookNoColor<<basicCellType>><<insetSpecifier>>}%
         } % end then section of ifthenelse
         {  % -----------------------------------------------------------------------
            % Begin else section of ifthenelse, color formatting.
            % -----------------------------------------------------------------------
            \lstset{style=lyxNotebookColor<<basicCellType>><<insetSpecifier>>}%
         } % end else section of ifthenelse
         % -----------------------------------------------------------------------
         % Now execute the any relevant user-defined lstset commands.
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllAll}}%
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllAll%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstset<<basicCellType>>All}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstset<<basicCellType>>All%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAll<<insetSpecifier>>}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAll<<insetSpecifier>>%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstset<<basicCellType>><<insetSpecifier>>}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstset<<basicCellType>><<insetSpecifier>>%
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         % Put a rotated, bold, ttfamily "<<progName>>"
         % always in the right margin.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoCellLabels}{false}}{%
            %
            % The \needspace command keeps the marginnote together with the listing
            % even on pagebreaks.
            %
            % The \leavevmode (or an empty \mbox{}) keeps the marginnote aligned
            % with the top of the listing even when \flushbottom adds vertical
            % space.  It does so by keeping everything on same line.  Not all are
            % probably needed, but it seems to work somewhat.  As a last
            % resort one could temporarily set \raggedbottom.
            %
            % The use of two \marginnote commands (each with an empty slot) is to
            % keep the margin note to the right, even when twosided styles are used.
            %
            \mbox{}%
            %\Needspace*{\lyxNotebookNeedspaceLabelValue}% exact, flushbottom
            %\Needspace{\lyxNotebookNeedspaceLabelValue}% exact but not flushbottom
            \needspace{\lyxNotebookNeedspaceLabelValue}% not flushbottom, approx
            {\reversemarginpar\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat <<progName>>}}[0.8em]}\marginnote[]{\rotatebox{-90}{\lyxNotebookLabelFormat <<progName>>}}[0.8em]%
            %{\reversemarginpar % this gets the "always to right" for even & odd pages
            %\marginpar[\rotatebox{-90}{\bfseries\ttfamily\tiny <<progName>>}]{rrev}}
            %\marginpar[lplain]{\rotatebox{-90}{\bfseries\ttfamily\tiny <<progName>>}}
            \nopagebreak%
         } % end of do label-printing
         {} % do nothing when lyxNotebookNoCellLabels is true
         % -----------------------------------------------------------------------
      }% end of lstnewenvironment starting code block
      { % begin of lstnewenvironment ending code block
         % try to avoid breaks between code cells and output cells (if output printed)
         \ifthenelse{\equal{\lyxNotebookPrintingIsOffOutput<<insetSpecifier>>}{false}}{%
         \nopagebreak
         }{}%
      }% end of lstnewenvironment ending code block
   EndPreamble
End
"""

# ===========================================
# Define the basic template for Output cells.
# ===========================================

output_template = \
    r"""

InsetLayout Flex:LyxNotebookCell:Output:<<insetSpecifier>>
        # Flex custom layouts work with flex-insert, but exact case matters, e.g.,
        #    flex-insert Flex:WrapListings
        # Also works with inset-forall:
        #    inset-forall Flex:WrapListings self-insert egg
        # but puts "egg" before the inset, not inside it.  The operations can also
        # be applied to any prefix, split at a colon, to apply to larger groups.
   LyXType              custom
   #
   # Spacing and newlines.
   #
   FreeSpacing          true
   PassThru             true # true for raw, false to do Latex processing on text
   SpellCheck           false
   # NewLine              false # whether newlines are translated into Latex \\
   ParbreakIsNewline    true
   KeepEmpty            true # keep empty lines
   ForceLTR             true # not sure why, but similar modules set it
   MultiPar             true
   ForcePlain           true # force Plain Layout, so user cannot change
   # custompars false stops blue highlighting on update, inset-select-all still works
   # CustomPars           false # cannot use "paragraph settings" dialog inside inset
   #
   # Labels, fonts, and colors.
   #
   LabelString          "<<insetSpecifier>> Output"
   # Decoration           minimalistic
   Decoration           classic
   BgColor              white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      # Family              Roman
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
   LabelFont # the font of the inset label in LyX, must be after Font
      # Color          collapsable
      Color          green
      Size           Small
   EndFont
   #
   # Latex-related settings.
   #
   LatexName            lyxNotebookCellOutput<<insetSpecifier>>
   # LatexType            command
   LatexType            Environment
   # RequiredArgs         0    # not used
   # LatexParam         "[fragile,allowframebreaks]" # example, not real params
   Requires             "listings,verbatim,ifthen,textcomp"
   # NeedProtect        true
   RefPrefix            "lyxCell"
   Preamble
      %
      % The preamble inserted by <<insetSpecifier>> Output InsetLayout.
      %

      % calculate the length of spacing between two listings, to remove it
      \ifthenelse{\isundefined{\doubleskipamount}}{\newlength{\doubleskipamount}}{}
      \setlength{\doubleskipamount}{-\medskipamount}
      \addtolength{\doubleskipamount}{2pt}

      \lstnewenvironment{lyxNotebookCellOutput<<insetSpecifier>>}{
         \nopagebreak % try to keep on the same page as standard cell above it
         % -----------------------------------------------------------------------
         % Do color-related lstsets, according to user choice of color or not.
         % -----------------------------------------------------------------------
         \ifthenelse{\equal{\lyxNotebookNoColor}{true}}{
            % --------------------------------------------------------------------
            % Begin then section of ifthenelse, formatting without color.
            % --------------------------------------------------------------------
            \lstset{style=lyxNotebookNoColorOutput<<insetSpecifier>>}
         } % end then section of ifthenelse
         {
            % -----------------------------------------------------------------------
            % Begin else section of ifthenelse, color formatting.
            % -----------------------------------------------------------------------
            \lstset{style=lyxNotebookColorOutput<<insetSpecifier>>}
         } % end else section of ifthenelse
         % -----------------------------------------------------------------------
         % Now execute the any relevant user-defined lstset commands.
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAllAll}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAllAll
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstset<<basicCellType>>All}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstset<<basicCellType>>All
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstsetAll<<insetSpecifier>>}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstsetAll<<insetSpecifier>>
         } % end of else section of ifthenelse for whether user lstset is defined
         % -----------------------------------------------------------------------
         \ifthenelse{\isundefined{\lyxNotebookLstset<<basicCellType>><<insetSpecifier>>}}
         {} % do nothing if command is undefined
         {  % otherwise, the user defined it so call it
            \lyxNotebookLstset<<basicCellType>><<insetSpecifier>>
         } % end of else section of ifthenelse for whether user lstset is defined
      }% end of lstnewenvironment starting code block
      {}% all of lstnewenvironment ending code (empty)
   EndPreamble
End
"""

# ==================================================================================
# Define the basic template for the module to redefine Listings to use a small font.
# ==================================================================================

listings_with_small_font = \
    r"""#\DeclareLyXModule{Listings with Small Font}
#DescriptionBegin
#Changes the built-in LyX listings insets to use a small font in the LyX display.
#Nothing about how the code is formatted for printing is changed.  Distributed
#with the LyX Notebook program for consistency in the appearance of code in
#insets.
#DescriptionEnd

# Author : alb
#
# THIS FILE IS AUTOMATICALLY GENERATED BY generateModuleFilesFromTemplate.py
# Modifications can be made, but they will be overwritten if it is run again.

Format 21

Requires "listings"

InsetLayout Listings
   CopyStyle           Listings
   BgColor             white
   Font # the font of the text in Lyx, not the Latex font
      Color               foreground
      Size                Small
      Family              Typewriter
      Shape               Up
      Series              Medium
   EndFont
End
"""


#
# ==========================================================================
# Generate the files from the templates
# ==========================================================================
#

def generate_files_from_templates():

    # first do the Listings redefinition, since it just needs to be written out
    with open("lyxNotebookListingsWithSmallFont.module", "w") as f:
        f.write(listings_with_small_font)

    # now do all the other modules, one for each interpreter specification
    for spec in allSpecs:
        preambleLatexCode = spec.preambleLatexCode
        insetSpecifier = spec.params["insetSpecifier"]
        progName = spec.params["progName"]
        lstLanguage = spec.params["listingsLanguage"]

        print("running for insetSpecifier=" + insetSpecifier
              + ",  progName=" + progName + ",  listingsLanguage=" + lstLanguage)

        headCommon = module_header_template_common
        headDependent = module_header_template_basic_cell_type_dependent
        init = standard_template
        standard = standard_template
        output = output_template

        # replace meta-vars in the common header section
        headCommon = headCommon.replace("<<tripleQuote>>", "\"\"\"")
        headCommon = headCommon.replace("<<insetSpecifier>>", insetSpecifier)
        headCommon = headCommon.replace("<<progName>>", progName)
        headCommon = headCommon.replace("<<lstLanguage>>", lstLanguage)

        head = headCommon

        # replace meta-vars in dependent header, one copy for each basicCellType
        # NOTE that we could have just treated the sections as <<...>> vars in headCommon
        for basicCellType in ["Init", "Standard", "Output"]:
            headTmp = headDependent
            headTmp = headTmp.replace("<<tripleQuote>>", "\"\"\"")
            headTmp = headTmp.replace("<<insetSpecifier>>", insetSpecifier)
            headTmp = headTmp.replace("<<progName>>", progName)
            headTmp = headTmp.replace("<<lstLanguage>>", lstLanguage)
            headTmp = headTmp.replace("<<basicCellType>>", basicCellType)
            head += headTmp

        # replace certain meta-vars in preambleLatexCode
        preambleLatexCode = preambleLatexCode.replace("<<tripleQuote>>", "\"\"\"")
        preambleLatexCode = preambleLatexCode.replace("<<insetSpecifier>>", insetSpecifier)
        preambleLatexCode = preambleLatexCode.replace("<<progName>>", progName)
        preambleLatexCode = preambleLatexCode.replace("<<lstLanguage>>", lstLanguage)

        # now we have the full .module file header (stuff before any InsetLayout commands)
        head += preambleLatexCode + module_header_template_end

        # replace meta-vars in standard template
        standard = standard.replace("<<tripleQuote>>", "\"\"\"")
        standard = standard.replace("<<insetSpecifier>>", insetSpecifier)
        standard = standard.replace("<<progName>>", progName)
        standard = standard.replace("<<labelModifier>>", "") # just Code, no special label
        standard = standard.replace("<<lstLanguage>>", lstLanguage)
        standard = standard.replace("<<basicCellType>>", "Standard")

        # replace meta-vars in init template
        # init cells are currently identical to standard cells except for the frame spec
        init = init.replace("<<tripleQuote>>", "\"\"\"")
        init = init.replace("<<insetSpecifier>>", insetSpecifier)
        init = init.replace("<<progName>>", progName)
        init = init.replace("<<labelModifier>>", "Init") # use "Init Code" on inset label
        init = init.replace("<<lstLanguage>>", lstLanguage)
        init = init.replace("<<basicCellType>>", "Init")

        # replace meta-vars in output template
        output = output.replace("<<insetSpecifier>>", insetSpecifier)
        output = output.replace("<<progName>>", progName)
        output = output.replace("<<basicCellType>>", "Output")

        # write concat of all templates to correct output file
        with open("lyxNotebookCell"+insetSpecifier+".module", "w") as f:
            f.write(head + init + standard + output)

generate_files_from_templates()

